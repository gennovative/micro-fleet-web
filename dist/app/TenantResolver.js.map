{"version":3,"sources":["app/TenantResolver.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAkF;AAClF,+DAA8F;AAE9F;;GAEG;AAEH,IAAa,cAAc,GAA3B;IAEC,YACwC,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAG7D,CAAC;IAED;;;OAGG;IACU,OAAO,CAAC,UAAkB;;YACtC,gDAAgD;YAChD,EAAE,CAAC,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAAC,CAAC;YAEvC,IAAI,GAAG,GAAG,WAAW,UAAU,EAAE,EAChC,QAAQ,GAAY,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAAC,MAAM,CAAC,QAAQ,CAAC;YAAC,CAAC;YAElC,kEAAkE;YAClE,gCAAgC;YAEhC,UAAU;YACV,IAAI,MAAM,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;YAExC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,oCAAU,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAClB,CAAC;KAAA;CACD,CAAA;AA7BY,cAAc;IAD1B,iCAAU,EAAE;IAIT,WAAA,6BAAM,CAAC,+BAAG,CAAC,cAAc,CAAC,CAAA;qCAAmB,uCAAa;GAHjD,cAAc,CA6B1B;AA7BY,wCAAc","file":"TenantResolver.js","sourcesContent":["import { CacheProvider, CacheLevel, Types as CaT } from 'back-lib-cache-provider';\r\nimport { injectable, inject, unmanaged, Guard, HandlerContainer } from 'back-lib-common-util';\r\n\r\n/**\r\n * Provides method to look up tenant ID from tenant slug.\r\n */\r\n@injectable()\r\nexport class TenantResolver {\r\n\r\n\tconstructor(\r\n\t\t\t@inject(CaT.CACHE_PROVIDER) protected _cache: CacheProvider,\r\n\t\t\t//@inject(GvT.TENANT_PROVIDER) protected _tenantProvider: ITenantProvider\r\n\t\t) {\r\n\t}\r\n\r\n\t/**\r\n\t * Looks up tenant ID from given slug.\r\n\t * @param tenantSlug \r\n\t */\r\n\tpublic async resolve(tenantSlug: string): Promise<BigSInt> {\r\n\t\t// Preserved slug, specially for system services\r\n\t\tif (tenantSlug == '_') { return null; }\r\n\r\n\t\tlet key = `tenant::${tenantSlug}`,\r\n\t\t\ttenantId: BigSInt = await this._cache.getPrimitive(key, false, false);\r\n\t\tif (tenantId) { return tenantId; }\r\n\r\n\t\t// let tenant = await this._tenantProvider.findBySlug(tenantSlug);\r\n\t\t// if (!tenant) { return null; }\r\n\r\n\t\t// Mocking\r\n\t\tlet tenant = { id: Math.random() + '' };\r\n\r\n\t\tthis._cache.setPrimitive(key, tenant.id, null, CacheLevel.BOTH);\r\n\t\treturn tenant.id;\r\n\t}\r\n}"]}