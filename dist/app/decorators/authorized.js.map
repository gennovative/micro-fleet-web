{"version":3,"sources":["app/decorators/authorized.ts"],"names":[],"mappings":";AAAA,qCAAqC;AACrC,yEAAyE;;AAUzE,gEAA6D;AAC7D,qCAA6C;AAU7C;;;;;;GAMG;AACH;IAEC,MAAM,CAAC,UAAU,WAA0B,EAAE,GAAW;QACvD,IAAI,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,mFAAmF;QAC9G,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;QACpB,CAAC;QACD,WAAW,GAAG,0BAAiB,CAAkB,iCAAe,EAAE,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC,CAAkB,CAAC;QAC7H,MAAM,CAAC,WAAW,CAAC;IACpB,CAAC,CAAC;AACH,CAAC;AATD,gCASC","file":"authorized.js","sourcesContent":["// Empty operation name => must login\r\n// Non-empty op name => check op's conditions => must or no need to login\r\n\r\n/// <reference types=\"reflect-metadata\" />\r\n\r\nimport * as acorn from 'acorn';\r\nimport * as ESTree from 'estree';\r\nimport { ModuleNames, ActionNames } from 'back-lib-common-constants';\r\nimport { CriticalException, Guard, INewable } from 'back-lib-common-util';\r\n\r\nimport { MetaData } from '../constants/MetaData';\r\nimport { AuthorizeFilter } from '../filters/AuthorizeFilter';\r\nimport { addFilterToTarget } from './filter';\r\n\r\n\r\nexport type AuthorizedDecorator = <T>(\r\n\tFilterClass: new (...param: any[]) => T,\r\n\tfilterFunc: (filter: T) => Function,\r\n\tpriority?: number\r\n) => Function;\r\n\r\n\r\n/**\r\n * Used to add filter to controller class and controller action.\r\n * @param {class} FilterClass Filter class whose name must end with \"Filter\".\r\n * @param {ExpressionStatement} filterFunc An arrow function that returns filter's function.\r\n * \t\tThis array function won't be executed, but is used to extract filter function name.\r\n * @param {number} priority A number from 0 to 10, filters with greater priority run before ones with less priority.\r\n */\r\nexport function authorized(): Function {\r\n\r\n\treturn function (TargetClass: INewable<any>, key: string): Function {\r\n\t\tlet isActionScope = !!key; // If `key` has value, `targetClass` is \"prototype\" object, otherwise it's a class.\r\n\t\tif (isActionScope) {\r\n\t\t}\r\n\t\tTargetClass = addFilterToTarget<AuthorizeFilter>(AuthorizeFilter, f => f.authenticate, TargetClass, key, 9) as INewable<any>;\r\n\t\treturn TargetClass;\r\n\t};\r\n}"]}