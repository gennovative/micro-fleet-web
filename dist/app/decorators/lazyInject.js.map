{"version":3,"sources":["app/decorators/lazyInject.ts"],"names":[],"mappings":";AAAA,0CAA0C;;AAK1C,oDAAiD;AAGjD,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC;AAE3B,qBAAqB,KAAU,EAAE,GAAW,EAAE,OAAkB;IAC/D;QACC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;YAChD,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;QACzD,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IAClD,CAAC;IAED,gBAAgB,MAAW;QAC1B,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE;QACjC,YAAY,EAAE,IAAI;QAClB,UAAU,EAAE,IAAI;QAChB,GAAG,EAAE,MAAM;QACX,GAAG,EAAE,MAAM;KACX,CAAC,CAAC;AACJ,CAAC;AAID;;;GAGG;AACH,oBAA2B,aAA8B;IACxD,MAAM,CAAC,UAAU,KAAU,EAAE,GAAW;QACvC,IAAI,OAAO,GAAG,MAAM,6BAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC7E,WAAW,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC,CAAC;AACH,CAAC;AALD,gCAKC","file":"lazyInject.js","sourcesContent":["/// <reference types=\"reflect-metadata\" />\r\n\r\nimport { IDependencyContainer } from 'back-lib-common-util';\r\n\r\nimport { MetaData } from '../constants/MetaData';\r\nimport { serverContext } from '../ServerContext';\r\n\r\n\r\nconst INJECTION = Symbol();\r\n\r\nfunction proxyGetter(proto: any, key: string, resolve: () => any) {\r\n\tfunction getter() {\r\n\t\tif (!Reflect.hasMetadata(INJECTION, this, key)) {\r\n\t\t\tReflect.defineMetadata(INJECTION, resolve(), this, key);\r\n\t\t}\r\n\t\treturn Reflect.getMetadata(INJECTION, this, key);\r\n\t}\r\n\r\n\tfunction setter(newVal: any) {\r\n\t\tReflect.defineMetadata(INJECTION, newVal, this, key);\r\n\t}\r\n\r\n\tObject.defineProperty(proto, key, {\r\n\t\tconfigurable: true,\r\n\t\tenumerable: true,\r\n\t\tget: getter,\r\n\t\tset: setter\r\n\t});\r\n}\r\n\r\nexport type LazyInjectDecorator = (depIdentifier: symbol | string) => Function;\r\n\r\n/**\r\n * Injects value to the decorated property. \r\n * Used to decorate properties of a class that's cannot be resolved by dependency container.\r\n */\r\nexport function lazyInject(depIdentifier: symbol | string): Function {\r\n\treturn function (proto: any, key: string): void {\r\n\t\tlet resolve = () => serverContext.dependencyContainer.resolve(depIdentifier);\r\n\t\tproxyGetter(proto, key, resolve);\r\n\t};\r\n}"]}