{"version":3,"sources":["app/RestControllerBase.ts"],"names":[],"mappings":"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","file":"RestControllerBase.js","sourcesContent":["import * as express from 'express';\r\nimport TrailsApp = require('trails');\r\nimport TrailsController = require('trails/controller');\r\n\r\nimport { injectable, decorate, unmanaged, HandlerContainer } from 'back-lib-common-util';\r\nimport {\r\n\tSettingItem, SettingItemDataType, ISoftDelRepository,\r\n\tModelAutoMapper, JoiModelValidator, PagedArray\r\n} from 'back-lib-common-contracts';\r\n\r\n\r\nexport type TrailsRouteConfigItem = {\r\n\tmethod: string | string[],\r\n\tpath: string,\r\n\thandler: string | Function,\r\n\tconfig?: any\r\n};\r\n\r\ndecorate(injectable(), TrailsController);\r\ndecorate(unmanaged(), TrailsController, 0);\r\n\r\n@injectable()\r\nexport abstract class RestControllerBase extends TrailsController {\r\n\r\n\t/**\r\n\t * Generates Trails route configs to put in file app/config/routes.js\r\n\t * @param {string} method Case-insensitive HTTP verb such as GET, POST, DELETE...\r\n\t * @param {string} action Action name of this route.\r\n\t * @param {string} controllerDepIdentifier Key to look up and resolve from dependency container.\r\n\t * @param {string} pathPrefix Path prefix with heading slash and without trailing slash. Eg: /api/v1\r\n\t * @param {HandlerContainer} container Handler container\r\n\t * @param {any} config Additional configuration, such as precondition policy...\r\n\t */\r\n\tpublic static createRoute(method: string, action: string,\r\n\t\t\tcontrollerDepIdentifier: string,\r\n\t\t\tpathPrefix: string = '',\r\n\t\t\tcontainer: HandlerContainer = null,\r\n\t\t\tconfig: any = null\r\n\t\t): TrailsRouteConfigItem {\r\n\r\n\t\tcontainer = container || HandlerContainer.instance;\r\n\t\treturn {\r\n\t\t\tmethod,\r\n\t\t\tpath: `${pathPrefix}/:tenant/${action}`,\r\n\t\t\thandler: container.register(action, controllerDepIdentifier),\r\n\t\t\tconfig\r\n\t\t};\r\n\t}\r\n\r\n\r\n\tconstructor(@unmanaged() trailsApp: TrailsApp) {\r\n\t\tsuper(trailsApp);\r\n\t}\r\n\r\n\r\n\t/*** SUCCESS ***/\r\n\r\n\t/**\r\n\t * Responds as Accepted with status code 202 and optional data.\r\n\t * @param res Express response object.\r\n\t * @param data Data to optionally return to client.\r\n\t */\r\n\tprotected accepted(res: express.Response, data?: any): void {\r\n\t\tthis.send(res, data, 202);\r\n\t}\r\n\r\n\t/**\r\n\t * Responds as Created with status code 201 and optional data.\r\n\t * @param res Express response object.\r\n\t * @param data Data to optionally return to client.\r\n\t */\r\n\tprotected created(res: express.Response, data?: any): void {\r\n\t\tthis.send(res, data, 201);\r\n\t}\r\n\r\n\t/**\r\n\t * Responds as OK with status code 200 and optional data.\r\n\t * @param res Express response object.\r\n\t * @param data Data to optionally return to client.\r\n\t */\r\n\tprotected ok(res: express.Response, data?: any): void {\r\n\t\tthis.send(res, data, 200);\r\n\t}\r\n\r\n\r\n\t/*** CLIENT ERRORS ***/\r\n\r\n\t/**\r\n\t * Responds with error status code (default 400) and writes error to server log,\r\n\t * then returned it to client.\r\n\t * @param res Express response object.\r\n\t * @param returnErr Error to dump to server log, and returned to client.\r\n\t * @param statusCode HTTP status code. Must be 4xx. Default is 400.\r\n\t * @param shouldLogErr Whether to write error to server log (eg: Illegal attempt to read/write resource...). Default to false.\r\n\t */\r\n\tprotected clientError(res: express.Response, returnErr: any, statusCode: number = 400, shouldLogErr: boolean = false): void {\r\n\t\tshouldLogErr && super.log.error(returnErr);\r\n\t\tstatusCode = (400 <= statusCode && statusCode <= 499) ? statusCode : 400;\r\n\t\tres.status(statusCode).send(returnErr);\r\n\t}\r\n\r\n\t/**\r\n\t * Responds as Forbidden with status code 403 and optional error message.\r\n\t * @param res Express response object.\r\n\t * @param returnErr Data to optionally return to client.\r\n\t */\r\n\tprotected forbidden(res: express.Response, returnErr?: any): void {\r\n\t\tthis.clientError(res, returnErr, 403);\r\n\t}\r\n\r\n\t/**\r\n\t * Responds as Not Found with status code 404 and optional error message.\r\n\t * @param res Express response object.\r\n\t * @param returnErr Data to optionally return to client.\r\n\t */\r\n\tprotected notFound(res: express.Response, returnErr?: any): void {\r\n\t\tthis.clientError(res, returnErr, 404);\r\n\t}\r\n\r\n\t/**\r\n\t * Responds as Unauthorized with status code 401 and optional error message.\r\n\t * @param res Express response object.\r\n\t * @param returnErr Data to optionally return to client.\r\n\t */\r\n\tprotected unauthorized(res: express.Response, returnErr?: any): void {\r\n\t\tthis.clientError(res, returnErr, 401);\r\n\t}\r\n\r\n\t/**\r\n\t * Responds error Precondition Failed with status code 412 and\r\n\t * then returned error to client.\r\n\t * @param res Express response object.\r\n\t * @param returnErr Error to returned to client.\r\n\t */\r\n\tprotected validationError(res: express.Response, returnErr: any): void {\r\n\t\tthis.clientError(res, returnErr, 412);\r\n\t}\r\n\r\n\r\n\t/*** SERVER ERRORS ***/\r\n\r\n\t/**\r\n\t * Responds as Internal Error with status code 500 and\r\n\t * writes error to server log. The error is not returned to client.\r\n\t * @param res Express response object.\r\n\t * @param logErr Error to dump to server log, but not returned to client.\r\n\t */\r\n\tprotected internalError(res: express.Response, logErr: any): void {\r\n\t\tsuper.log.error(logErr);\r\n\t\tres.status(500).send('server.error.internal');\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sends response to client.\r\n\t * @param res Express response object.\r\n\t * @param data Data to return to client.\r\n\t * @param statusCode HTTP status code. Default is 200.\r\n\t */\r\n\tprotected send(res: express.Response, data: any, statusCode: number): express.Response {\r\n\t\treturn res.status(statusCode).send(data);\r\n\t}\r\n}"]}