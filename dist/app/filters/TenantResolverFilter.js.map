{"version":3,"sources":["app/filters/TenantResolverFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,qEAAkF;AAClF,+DAA0D;AAE1D;;GAEG;AAEH,IAAa,oBAAoB,GAAjC;IAGC,YACwC,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QAG5D,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAmB,CAAC;IAC5C,CAAC;IAEY,OAAO,CAAC,GAAoB,EAAE,GAAqB,EAAE,IAAc;;YAC/E,MAAM,EAAE,UAAU,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;YAElC,iDAAiD;YACjD,EAAE,CAAC,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC;gBACvB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBAC9B,MAAM,CAAC,IAAI,EAAE,CAAC;YACf,CAAC;YAED,IAAI,GAAG,GAAG,uBAAuB,UAAU,EAAE,EAC5C,QAAiB,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,QAAQ,IAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAY,CAAA,CAAC;YACzE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC1C,CAAC;YAED,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACd,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;gBAClC,MAAM,CAAC,IAAI,EAAE,CAAC;YACf,CAAC;YAED,kEAAkE;YAClE,gCAAgC;YAEhC,UAAU;YACV,IAAI,MAAM,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;YAExC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE,EAAE,IAAI,EAAE,oCAAU,CAAC,IAAI,CAAC,CAAC;YACjE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;YAC1C,CAAC;YACD,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC;YACnC,IAAI,EAAE,CAAC;QACR,CAAC;KAAA;CACD,CAAA;AA9CY,oBAAoB;IADhC,iCAAU,EAAE;IAKT,WAAA,6BAAM,CAAC,+BAAG,CAAC,cAAc,CAAC,CAAA;qCAAmB,uCAAa;GAJjD,oBAAoB,CA8ChC;AA9CY,oDAAoB","file":"TenantResolverFilter.js","sourcesContent":["import * as express from 'express';\r\n\r\nimport { CacheProvider, CacheLevel, Types as CaT } from 'back-lib-cache-provider';\r\nimport { injectable, inject } from 'back-lib-common-util';\r\n\r\n/**\r\n * Provides method to look up tenant ID from tenant slug.\r\n */\r\n@injectable()\r\nexport class TenantResolverFilter {\r\n\r\n\tprivate _tenants: Map<string, BigSInt>;\r\n\tconstructor(\r\n\t\t\t@inject(CaT.CACHE_PROVIDER) protected _cache: CacheProvider,\r\n\t\t\t//@inject(GvT.TENANT_PROVIDER) protected _tenantProvider: ITenantProvider\r\n\t\t) {\r\n\t\tthis._tenants = new Map<string, BigSInt>();\r\n\t}\r\n\r\n\tpublic async resolve(req: express.Request, res: express.Response, next: Function): Promise<void> {\r\n\t\tconst { tenantSlug } = req.params;\r\n\r\n\t\t// Preserved slug, specially for system services.\r\n\t\tif (tenantSlug == '_') { \r\n\t\t\treq.params['tenantId'] = null;\r\n\t\t\treturn next();\r\n\t\t}\r\n\r\n\t\tlet key = `common-web::tenant::${tenantSlug}`,\r\n\t\t\ttenantId: BigSInt;\r\n\t\tif (this._cache) {\r\n\t\t\ttenantId = await this._cache.getPrimitive(key, false, false) as BigSInt;\r\n\t\t} else {\r\n\t\t\ttenantId = this._tenants.get(tenantSlug);\r\n\t\t}\r\n\r\n\t\tif (tenantId) {\r\n\t\t\treq.params['tenantId'] = tenantId;\r\n\t\t\treturn next();\r\n\t\t}\r\n\r\n\t\t// let tenant = await this._tenantProvider.findBySlug(tenantSlug);\r\n\t\t// if (!tenant) { return null; }\r\n\r\n\t\t// Mocking\r\n\t\tlet tenant = { id: Math.random() + '' };\r\n\r\n\t\tif (this._cache) {\r\n\t\t\tthis._cache.setPrimitive(key, tenant.id, null, CacheLevel.BOTH);\r\n\t\t} else {\r\n\t\t\tthis._tenants.set(tenantSlug, tenant.id);\r\n\t\t}\r\n\t\treq.params['tenantId'] = tenant.id;\r\n\t\tnext();\r\n\t}\r\n}"]}